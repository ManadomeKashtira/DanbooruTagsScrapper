%pip install requests Pillow
DANBOORU_BASE_URL = "https://danbooru.donmai.us/posts.json"
CUSTOM_TAGS = "shining_nikki" # TAGS
NUM_PAGES = 70 #how many pages
#=========================================================
#Proccess
#=========================================================
import requests
import os
from urllib.parse import quote

all_image_data = []

for page_num in range(1, NUM_PAGES + 1):
    encoded_tags = quote(CUSTOM_TAGS)
    api_url = f"{DANBOORU_BASE_URL}?tags={encoded_tags}&page={page_num}"

    try:
        response = requests.get(api_url)
        response.raise_for_status()

        page_data = response.json()
        all_image_data.extend(page_data)
        print(f"Fetched page {page_num}")

    except requests.exceptions.RequestException as e:
        print(f"Error fetching page {page_num}: {e}")
        continue 

print(f"Total image entries fetched: {len(all_image_data)}")
download_dir = "dopwnloaded_images"
os.makedirs(download_dir, exist_ok=True)

for image_data in all_image_data:
    file_url = image_data.get('file_url')
    tag_string = image_data.get('tag_string')
    image_id = image_data.get('id')

    if file_url and tag_string and image_id is not None:
        try:
            
            filename = f"{image_id}{os.path.splitext(file_url)[1]}"
            image_filepath = os.path.join(download_dir, filename)
            tag_filepath = os.path.join(download_dir, f"{image_id}.txt")

            
            response = requests.get(file_url, stream=True)
            response.raise_for_status()

            with open(image_filepath, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)

            # Save the tags to a text file
            with open(tag_filepath, 'w') as f:
                f.write(tag_string)

            print(f"Downloaded image {image_id} and saved tags.")

        except requests.exceptions.RequestException as e:
            print(f"Error downloading image {image_id}: {e}")
        except Exception as e:
            print(f"An unexpected error occurred processing image {image_id}: {e}")
    else:
        print(f"Skipping image entry due to incomplete data: {image_data}")
